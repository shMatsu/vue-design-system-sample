name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the release (e.g., v1.0.1)'
        required: true
        type: string

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository using v4
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Get the latest 'test-' tag (including the tag being created)
      - name: Get latest 'test-' tag
        id: latest_tag
        run: |
          latest_test_tag=$(git tag -l "test-*" --sort=-v:refname | head -n 1)
          echo "Latest 'test-' tag: $latest_test_tag"
          echo "LATEST_TEST_TAG=$latest_test_tag" >> $GITHUB_ENV

      - name: Generate tag
        id: release_tag
        run: |
          echo "release_tag=test-${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      # Step 3: Generate release notes using GitHub API and configuration file
      - name: Generate release notes
        id: changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "${{ steps.release_tag.outputs.release_tag }}",
              "previous_tag_name": "${{ env.LATEST_TEST_TAG }}",
              "configuration_file_path": ".github/configs/release-notes.yml",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT

      # Step 5: リリースノートの本文を作成する
      - name: Create release note body
        id: release_note_body
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.changes.outputs.changes }} \
            | sed 's/\\"//g' | sed 's/["“]//g')" >> $GITHUB_OUTPUT

      # Step 6: タグを切り、リリースノートを作成する
      - name: Create Release
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"body\": \"${{ steps.release_note_body.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            body=$(cat response_body.txt)
            echo "Response Body: $body"
            if [ $status_code -ne 201 ]; then
              echo "Failed to create release"
              exit 1
            fi
